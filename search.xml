<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mysql存储引擎</title>
      <link href="/2022/10/14/mysql-cun-chu-yin-qing/"/>
      <url>/2022/10/14/mysql-cun-chu-yin-qing/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql存储引擎"><a href="#Mysql存储引擎" class="headerlink" title="Mysql存储引擎"></a>Mysql存储引擎</h1><h2 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1.基本介绍"></a>1.基本介绍</h2><p>1.MySQL的表类型由存储引擎(Storage Engines)决定，主要包括MyISAM、innoDB、Memory等。</p><p>2.MySQL数据表主要支持六种类型，分别是:GSV、Memory、ARCHIVE、MRG MYISAM、MYISAM、InnoDB.</p><p>3.这六种又分为两类，一类是”事务安全型”(transaction-safe)，比如:InnoDB;其余都属于第二类，称为”非事务安全型”(non-transaction- safe)[mysiam和memory]。</p><h2 id="2-主要的存储引擎"><a href="#2-主要的存储引擎" class="headerlink" title="2.主要的存储引擎"></a>2.主要的存储引擎</h2><table><thead><tr><th>特点</th><th>Myisam</th><th>InnoDB</th><th>Memory</th><th>Archive</th></tr></thead><tbody><tr><td>批量插入的速度</td><td>高</td><td>低</td><td>高</td><td>非常高</td></tr><tr><td>事务安全</td><td></td><td>支持</td><td></td><td></td></tr><tr><td>全文索引</td><td>支持</td><td></td><td></td><td></td></tr><tr><td>锁机制</td><td>表锁</td><td>行锁</td><td>表锁</td><td>行锁</td></tr><tr><td>存储限制</td><td>没有</td><td>64TB</td><td>有</td><td>没有</td></tr><tr><td>B树索引</td><td>支持</td><td>支持</td><td>支持</td><td></td></tr><tr><td>哈希索引</td><td></td><td>支持</td><td>支持</td><td></td></tr><tr><td>集群索引</td><td></td><td>支持</td><td></td><td></td></tr><tr><td>数据缓存</td><td></td><td>支持</td><td>支持</td><td></td></tr><tr><td>索引缓存</td><td>支持</td><td>支持</td><td>支持</td><td></td></tr><tr><td>数据可压缩</td><td>支持</td><td></td><td></td><td>支持</td></tr><tr><td>空间使用</td><td>低</td><td>高</td><td>N&#x2F;A</td><td>非常低</td></tr><tr><td>内存使用</td><td>低</td><td>高</td><td>中等</td><td>低</td></tr><tr><td>支持外键</td><td></td><td>支持</td><td></td><td></td></tr></tbody></table><h2 id="3-如何选择表的存储引擎"><a href="#3-如何选择表的存储引擎" class="headerlink" title="3.如何选择表的存储引擎"></a>3.如何选择表的存储引擎</h2><ul><li><p>如果你的应用不需要事务，处理的只是基本的CRUD操作，那么MyISAM是不二选择，速度快</p></li><li><p>如果需要支持事务，选择InnoDB</p></li><li><p>Memory存储引擎就是将数据存储在内存中，由于没有磁盘I.&#x2F;O的等待，速度极快，但由于是内存存储引擎，所做的任何修改在服务器重启后都将消失（用户子线状态）</p></li></ul><h2 id="4-存储引擎细节"><a href="#4-存储引擎细节" class="headerlink" title="4.存储引擎细节"></a>4.存储引擎细节</h2><ul><li>修改存储引擎： alter table 表名 engine &#x3D; 存储引擎</li><li>Myisam不支持事务，也不支持外键，但其访问速度快，对事务完整性没有要求</li><li>InnoDB存储引擎提供了具有提交，回滚和崩溃恢复能力的事务安全，但是比起Myisam存储引擎，InnoDB写的处理效率差一些，并且会占用更多的磁盘空间以保留数据和索引</li><li>Memory存储引擎使用存在内存中的内容来创建表，每个Memory表只实际对应一个磁盘文件。Memory类型的表访问速度非常快，因为它的数据是存放在内存中的，并且默认使用HASH索引，但是一旦服务关闭，表中的数据就会丢失掉，表的结构还在</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>final finally finalize</title>
      <link href="/2022/10/14/final/"/>
      <url>/2022/10/14/final/</url>
      
        <content type="html"><![CDATA[<h1 id="final-finally-finalize-三者区别"><a href="#final-finally-finalize-三者区别" class="headerlink" title="final finally finalize 三者区别"></a>final finally finalize 三者区别</h1><h2 id="1-final"><a href="#1-final" class="headerlink" title="1.final"></a>1.final</h2><h3 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1.基本介绍"></a>1.基本介绍</h3><p>1）当不希望类被继承时，可以用final修饰</p><p>2）当不希望父类的某个子方法覆盖&#x2F;重写时，可以用final关键字</p><p>3）当不希望类的某个属性的值被修改，可以用final修饰</p><p>4）当不希望某个局部变量被修改，可以用final修饰</p><h3 id="2-final细节"><a href="#2-final细节" class="headerlink" title="2.final细节"></a>2.final细节</h3><p>1）final修饰的属性又叫常量，一般用XX_XX_XX来命名</p><p>2）final修饰的属性在定义时，必须赋初值，并且以后不能再修改，赋值可以在如下位置之一</p><p>​      ①定义时，如 public final double TAX_RATE &#x3D; 0.08;</p><p>​      ②在构造器中</p><p>​      ③在代码块中</p><p>3）如果final修饰的属性是静态的，则初始化的位置只能是 ①定义时  ②在静态代码块 不能在构造器中赋值</p><p>4）final类不能继承，但是可以实例化对象</p><p>5）如果类不是final类，但是含有final方法，则该方法虽然不能重写，但是可以被继承</p><p>6)一般来说，如果一个类已经是final类，就没有必要再将方法修饰成final方法</p><p>7）final不能修饰构造方法</p><p>8）final和static往往搭配使用，效率更高，底层编译器做了优化处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleTon02</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>BBB<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">BBB</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>    <span class="token keyword">static</span>     <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BBB静态代码块被执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出10000，不会导致类加载，所以不会输出 BBB静态代码块被执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9）包装类（Integer，Double，Float，Boolean）等都是final、 String 也是final</p><h2 id="2-finally"><a href="#2-finally" class="headerlink" title="2.finally"></a>2.finally</h2><p>finally是在异常处理中的使用的</p><p>不管 try 语句块正常结束还是异常结束,finally 语句块是保证要执行的</p><p>如果 try 语句块正常结束,那么在 try 语句块中的语句都执行完之后,再执行 finally 语句块</p><ol><li>不管有没有出现异常,finally块中的代码都会执行;</li><li>当try和catch中有return时,finally仍然会执行;</li><li>finally是在return后面的表达式运算后执行的(此时并没有返回运算后的值,而是先把要返回的值保存起来,无论finally中的代码怎么样,返回的值都不会改变,仍然是之前保存的值),所以函数返回值是在finally执行前确定好的;</li><li>finally中最好不要包含return,否则程序会提前退出,返回值不是try或catch中保存的返回值</li></ol><h2 id="3-finalize"><a href="#3-finalize" class="headerlink" title="3.finalize"></a>3.finalize</h2><p>finalize() 是Java中Object的一个protected方法.返回值为空,当该对象被垃圾回收器回收时,会调用该方法.</p><p><strong>关于finalize()函数：</strong></p><ul><li>finalize不等价于c++中的析构函数;</li><li>对象可能不被垃圾机回收器回收;</li><li>垃圾回收不等于析构;</li><li>垃圾回收只与内存有关;</li><li>垃圾回收和finalize()都是靠不住的,只要JVM还没有快到耗尽内存的地步,它是不会浪费时间进行垃圾回收的;</li><li>程序强制终结后,那些失去引用的对象将会被垃圾回收.(System.gc())</li></ul><p>finalize()的用途:比如当一个对象代表了打开了一个文件,在对象被回收前,程序应该要关闭该文件,可以通过finalize函数来发现未关闭文件的对象,并对其进行处理.</p><h2 id="4-三者区别"><a href="#4-三者区别" class="headerlink" title="4.三者区别"></a>4.三者区别</h2><h3 id="1-性质不同"><a href="#1-性质不同" class="headerlink" title="1.性质不同"></a>1.性质不同</h3><p>（1）final为关键字;</p><p>（2）finalize()为方法;</p><p>（3）finally为区块标志,用于try语句中;</p><h3 id="2-作用"><a href="#2-作用" class="headerlink" title="2.作用"></a>2.作用</h3><p>（1）final为用于标识常量的关键字,final标识的关键字存储在常量池中</p><p>（2）finalize()方法在Object中进行了定义,用于在对象“消失”时,由JVM进行调用用于对对象 进行垃圾回收，类似于C++中的析构函数;用户自定义时,用于释放对象占用的资源(比如进行 I&#x2F;0操作);</p><p>（3）finally{ }用于标识代码块,与try{ }进行配合,不论try中的代码执行完或没有执行完(这里指有异常),该代码块之中的程序必定会进行 </p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String系列</title>
      <link href="/2022/10/04/string-xi/"/>
      <url>/2022/10/04/string-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="String，StringBuffer和StringBuilder"><a href="#String，StringBuffer和StringBuilder" class="headerlink" title="String，StringBuffer和StringBuilder"></a>String，StringBuffer和StringBuilder</h1><h2 id="一-String"><a href="#一-String" class="headerlink" title="一.String"></a>一.String</h2><h3 id="1-String简介"><a href="#1-String简介" class="headerlink" title="1.String简介"></a>1.String简介</h3><p>String:字符串，使用一对“ ”引起来表示。</p><ul><li>String 声明为final的，不可被继承。</li><li>Stirng 实现了Serializable接口：表示字符串是支持序列化的。实现了Comparable接口：b表示String可以比较大小。</li><li>String内部定义了final char[] value 用于存储字符串数据。</li><li>String:代表不可以变的字符序列。</li><li>通过字面量的方式（区别于new）给一个字符串赋值，此时的字符串值声明在字符串常量池中。</li><li>字符串常量池中是不会存储相同内容的字符串</li></ul><h3 id="2-String字符串的不可变性"><a href="#2-String字符串的不可变性" class="headerlink" title="2.String字符串的不可变性"></a>2.String字符串的不可变性</h3><ol><li>对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的value进行赋值。</li><li>当对现有的字符串赋值时，有需要重新指定内存区域赋值，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</li><li>当调用String的replace（）方法修改指定字符或者字符串时，也需要重新指定内存区域重新赋值。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">StringTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        <span class="token comment">//1.对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的value进行赋值。</span>        s1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//比较的是地址 false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hello</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abc</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.当对现有的字符串赋值时，有需要重新指定内存区域赋值，</span>        <span class="token comment">// 也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</span>        <span class="token class-name">String</span> s3 <span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>        s3 <span class="token operator">+=</span> <span class="token string">"def"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abcdef</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abc</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.当调用String的replace（）方法修改指定字符或者字符串时</span>        <span class="token comment">// ，也需要重新指定内存区域重新赋值。</span>        <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s5 <span class="token operator">=</span> s4<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token char">'a'</span><span class="token punctuation">,</span><span class="token char">'m'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abc</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//mbc</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-String的创建方式"><a href="#3-String的创建方式" class="headerlink" title="3.String的创建方式"></a>3.String的创建方式</h3><p>方式一：通过字面量的方式定义</p><p>先从常量池查看是否含有“hsp”数据空间，如果有，直接指向；如果没有则重新创建，然后指向s，s最终指向的是常量池的空间地址</p><p>方式二：通过new + 构造器的方式</p><p>先在堆中创建空间，里面维护了value属性，指向常量池的hsp空间，如果常量池没有“hsp”，重新创建，如果有，直接通过value指向，最终指向的是堆中的空间地址</p><p><strong>String内存结构</strong></p><img src="https://raw.githubusercontent.com/zhuanshenyujianta/images/master/img/202210041841526.png" style="zoom:67%;" /><h3 id="4-String字符串拼接"><a href="#4-String字符串拼接" class="headerlink" title="4.String字符串拼接"></a>4.String字符串拼接</h3><ul><li>常量与常量的拼接结果在常量池。且常量池中不会存在相同的常量。</li><li>只要其中有一个是变量，结果就在堆中。</li><li>如果拼接的结果调用intern()方法，返回值就在常量池中。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">StringTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"javaEE"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">"javaEEhadoop"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">"javaEE"</span> <span class="token operator">+</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s5 <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s6 <span class="token operator">=</span> <span class="token string">"javaEE"</span> <span class="token operator">+</span> s2<span class="token punctuation">;</span>        <span class="token class-name">String</span> s7 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s6 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://raw.githubusercontent.com/zhuanshenyujianta/images/master/img/202210041851416.png" style="zoom: 80%;" /><h3 id="5-String类常用的方法"><a href="#5-String类常用的方法" class="headerlink" title="5.String类常用的方法"></a>5.String类常用的方法</h3><p><strong>String类常用的方法调用API文档查看即可</strong></p><h2 id="二-StringBuffer"><a href="#二-StringBuffer" class="headerlink" title="二.StringBuffer"></a>二.StringBuffer</h2><h3 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1.基本介绍"></a>1.基本介绍</h3><ul><li><p>java.lang.StringBuffer代表可变的字符序列，可以对字符串内容进行增删</p></li><li><p>很多方法与String相同，但StringBuffer是可变长度的</p></li><li><p>StringBuffer是一个容器</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//1.StringBuffer的直接父类是 AbstractStringBuilder</span>    <span class="token comment">//2.StringBuffer实现了 Serializable,即StringBuffer的对象可以串行化</span>    <span class="token comment">//3.在父类中，AbstractStringBuilder有属性 char[] value,不是final</span>    <span class="token comment">// 该value数组存放字符串内容，因此存放在堆中</span>    <span class="token comment">//4.StringBuffer是一个final类，不能被继承</span>    <span class="token comment">//5.因为StringBuffer字符内容是存在 char[] value,所以在变化时（增加/删除）不用每次都更换地址（即不是每次创建对象），所以     效率高于String</span>    <span class="token class-name">StringBuffer</span> stringBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-String-VS-StringBuffer"><a href="#2-String-VS-StringBuffer" class="headerlink" title="2.String VS StringBuffer"></a>2.String VS StringBuffer</h3><ol><li>String保存的是字符串变量，里面的值不能更改，每次String类的更新实际上就是更改地址，效率较低</li><li>StringBuffer保存的是字符串变量，里面的值可以更改，每次StringBuffer的更新实际上可以更新内容，不用更新地址，效率较高</li></ol><h3 id="3-StringBuffer的常用方法"><a href="#3-StringBuffer的常用方法" class="headerlink" title="3.StringBuffer的常用方法"></a>3.StringBuffer的常用方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">StringBuffer</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//增</span>    s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"张三丰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"赵敏"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">10.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出hello,张三丰赵敏100true10.5</span>    <span class="token comment">//删除</span>    s<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除[11,14）之间的字符</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出hello,张三丰赵敏true10.5</span>    <span class="token comment">//改</span>    s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">"周芷若"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出hello,张三丰周芷若true10.5</span>    <span class="token comment">//查找</span>    <span class="token keyword">int</span> indexOf <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"张三丰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>indexOf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6</span>    <span class="token comment">//插</span>    s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">"赵敏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出hello,张三丰赵敏周芷若true10.5</span>    <span class="token comment">//长度</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//22</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//要求价格的小数点前面每三位用逗号隔开</span>    <span class="token class-name">String</span> price <span class="token operator">=</span> <span class="token string">"123562212333564.59"</span><span class="token punctuation">;</span>    <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">-=</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        sb <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三-StringBuilder"><a href="#三-StringBuilder" class="headerlink" title="三.StringBuilder"></a>三.StringBuilder</h2><h3 id="1-基本介绍-1"><a href="#1-基本介绍-1" class="headerlink" title="1.基本介绍"></a>1.基本介绍</h3><ol><li><p>一个可变的字符序列，此类提供一个与StringBuffer兼容的API，但不保证同步，该类被设计用作StringBuffer的一个简易替换，用在字符串缓冲区被单个线程使用的时候，如果可能，建议优先采用该类，因为在大多数实现中，它比StringBuffer要快</p></li><li><p>在StringBuffer上的主要操作是append和insert方法，可重载这些方法，以接受任意类型的数据</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//1.StringBuilder也继承了AbstractStringBuilder类</span>    <span class="token comment">//2.实现了Serializable,即StringBuilder的对象可以串行化（该对象可以网络传输，也可以保存到文件）</span>    <span class="token comment">//3.StringBuilder是一个final类，不能被继承</span>    <span class="token comment">//4.StringBuilder 对象字符序列仍然是放在其父类AbstractStringBuilder的 char[] value</span>    <span class="token comment">//5.StringBuilder的方法，没有做互斥的处理，即没有synchronized关键字，因此在单线程的情况下使用StringBuilder</span>    <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-String，StringBuffer和StringBuilder比较"><a href="#2-String，StringBuffer和StringBuilder比较" class="headerlink" title="2.String，StringBuffer和StringBuilder比较"></a>2.String，StringBuffer和StringBuilder比较</h3><ol><li><p>StringBuilder和StringBuffer非常类似，均代表可变的字符序列，而且方法也一样</p></li><li><p>String不可变字符序列，效率低，但是复用率高</p></li><li><p>StringBuffer：可变字符序列，效率较高，线程安全</p></li><li><p>StringBuilder：可变字符序列，效率最高，线程不安全</p></li></ol><p><strong>使用原则：</strong></p><p>1.如果字符串存在大量的修改操作，一般使用StringBuilder和StringBuffer</p><p>2.如果字符串存在大量的修改操作，并在单线程的情况下，使用StringBuilder</p><p>3.如果字符串存在大量的修改操作，并在多线程的情况夏，使用StringBuffer</p><p>4.如果字符串很少进行操作，被多个对象引用，使用String，比如配置信息等</p><h2 id="四-三者六大区别"><a href="#四-三者六大区别" class="headerlink" title="四.三者六大区别"></a>四.三者六大区别</h2><p><strong>区别一：</strong>String是final类不能被继承且为字符串常量，而StringBuilder和StringBuffer均为字符串变量。</p><p><strong>区别二：</strong>在String类中使用“+”作为数据的连接操作，而在StringBuffer类中使用append()方法（方法定义：public StringBuffer append(数据类型 变量)）进行数据连接。</p><p><strong>区别三：</strong>类的定义不同</p><p><strong>区别四：</strong>String类和StringBuilder、StringBuffer类的能互相转换。</p><p><strong>区别五：</strong>String类、StringBuffer和StringBuilder类中定义的常用方法，三类的大部分方法可以互补</p><p><strong>区别六：</strong>线程安全性方面</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装箱与拆箱</title>
      <link href="/2022/10/03/zhuang-xiang-yu-chai-xiang/"/>
      <url>/2022/10/03/zhuang-xiang-yu-chai-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="装箱与拆箱"><a href="#装箱与拆箱" class="headerlink" title="装箱与拆箱"></a>装箱与拆箱</h1><h2 id="1-什么是装箱和拆箱"><a href="#1-什么是装箱和拆箱" class="headerlink" title="1.什么是装箱和拆箱"></a>1.什么是装箱和拆箱</h2><p>装箱：基本类型转变为包装器类型的过程。<br>拆箱：包装器类型转变为基本类型的过程。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//JDK5之前是不支持自动装箱和自动拆箱的，定义Integer对象，必须</span><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//JDK5开始，提供了自动装箱的功能，定义Integer对象可以这样</span><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token keyword">int</span> n <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">//自动拆箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-装箱和拆箱的执行过程"><a href="#2-装箱和拆箱的执行过程" class="headerlink" title="2.装箱和拆箱的执行过程"></a>2.装箱和拆箱的执行过程</h2><p>装箱是通过调用包装器类的 valueOf 方法实现的<br>拆箱是通过调用包装器类的 xxxValue 方法实现的，xxx代表对应的基本数据类型<br>如int装箱的时候自动调用Integer的valueOf(int)方法；Integer拆箱的时候自动调用Integer的intValue方法</p><h2 id="3-常见包装类的比较"><a href="#3-常见包装类的比较" class="headerlink" title="3.常见包装类的比较"></a>3.常见包装类的比较</h2><ul><li>整型的包装类 valueOf 方法返回对象时，在常用的取值范围(-128~127)内，会返回缓存对象。</li><li>浮点型的包装类 valueOf 方法返回新的对象。</li><li>布尔型的包装类 valueOf 方法 Boolean类的静态常量 TRUE | FALSE。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">        <span class="token class-name">Integer</span> i1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> i3 <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> i4 <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1 <span class="token operator">==</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i3 <span class="token operator">==</span> i4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token comment">//我们看Integer.valueOf源码可知:在通过valueOf方法创建Integer对象的时候，如果数值在[-128,127]之间，便返回指向</span><span class="token comment">//IntegerCache.cache中已经存在的对象的引用；否则创建一个新的Integer对象，因此得出以上结论。</span>                <span class="token class-name">Double</span> d1 <span class="token operator">=</span> <span class="token number">100.0</span><span class="token punctuation">;</span>        <span class="token class-name">Double</span> d2 <span class="token operator">=</span> <span class="token number">100.0</span><span class="token punctuation">;</span>        <span class="token class-name">Double</span> d3 <span class="token operator">=</span> <span class="token number">200.0</span><span class="token punctuation">;</span>        <span class="token class-name">Double</span> d4 <span class="token operator">=</span> <span class="token number">200.0</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1 <span class="token operator">==</span> d2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d3 <span class="token operator">==</span> d4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token comment">//Double类的valueOf方法采用与Integer类的valueOf方法不同的实现，因为在某个范围内的整型数值的个数是有限的，而浮点数却不是</span><span class="token comment">//Integer、Short、Byte、Character、Long这几个类的valueOf方法的实现是类似的</span><span class="token comment">//Double、Float的valueOf方法的实现是类似的。</span>                <span class="token class-name">Boolean</span> b1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">Boolean</span> b2 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">Boolean</span> b3 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token class-name">Boolean</span> b4 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1 <span class="token operator">==</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b3 <span class="token operator">==</span> b4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//当 "=="运算符的两个操作数都是 包装器类型的引用，则是比较指向的是否是同一个对象</span><span class="token comment">//而如果其中有一个操作数是表达式（即包含算术运算）则比较的是数值（即会触发自动拆箱的过程）</span><span class="token comment">//另外，对于包装器类型，equals方法并不会进行类型转换</span><span class="token comment">//时刻注意如果数值在[-128,127]之间，便返回已经存在的对象的引用；否则创建一个新的对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> d <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> e <span class="token operator">=</span> <span class="token number">321</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> f <span class="token operator">=</span> <span class="token number">321</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> g <span class="token operator">=</span> <span class="token number">3L</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> h <span class="token operator">=</span> <span class="token number">2L</span><span class="token punctuation">;</span>                 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token operator">==</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token operator">==</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g<span class="token operator">==</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a<span class="token operator">+</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//第三句由于  a+b包含了算术运算，因此会触发自动拆箱过程（会调用intValue方法），因此它们比较的是数值是否相等</span><span class="token comment">//而对于c.equals(a+b)会先触发自动拆箱过程，再触发自动装箱过程，也就是说a+b，会先各自调用intValue方法，得到了加法运算后的数</span><span class="token comment">//值之后，便调用Integer.valueOf方法，再进行equals比较</span><span class="token comment">//注意倒数第二个和最后一个输出的结果（如果数值是int类型的，装箱过程调用的是Integer.valueOf；如果是long类型的，装箱调用的</span><span class="token comment">//Long.valueOf方法），最后一个自动拆箱后int型的a会自动转换为long型的a，再和long型的h相加，最后与同为long型的g比较</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内部类</title>
      <link href="/2022/10/01/nei-bu-lei/"/>
      <url>/2022/10/01/nei-bu-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><h2 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1.基本介绍"></a>1.基本介绍</h2><p>一个类的内部又完整的嵌套了另一个类的结构，被嵌套的类称为内部类，嵌套其他类的类称为外部类</p><p>内部类是类的第五大成员(属性，方法，构造器，代码块，内部类)，其最大的特点就是可以直接访问私有属性，并且可以体现类与类之间的包含关系</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">&#123;</span><span class="token comment">//外部类</span><span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">&#123;</span><span class="token comment">//内部类</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Other</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//外部其他类</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>内部类的分类：</strong></p><p>1.定义在外部类局部位置上(比如方法内)：</p><p>①局部内部类(有类名)</p><p><strong>②匿名内部类(没有类名)</strong></p><p>2.定义在外部类的成员位置上:</p><p>①成员内部类(没用static修饰)</p><p>②静态内部类(使用static修饰)</p><h2 id="2-局部内部类"><a href="#2-局部内部类" class="headerlink" title="2.局部内部类"></a>2.局部内部类</h2><p>①可以直接访问外部类的所有成员，包含私有的</p><p>②不能添加访问修饰符，因为它的地位就是一个局部变量，局部变量不能使用修饰符的，但是可以用final修饰</p><p>③作用域：仅仅在定义它的方法或代码块中</p><p>④局部内部类访问外部类的成员 访问方式：直接访问</p><p>⑤外部类访问局部内部类的成员 访问方式：创建对象，再访问，注意：必须在作用域内 </p><p>⑥外部其他类，不能访问局部内部类</p><p>⑦如果外部类和局部内部类的成员重名时，默认遵循就近原则，如果想访问外部类的成员，则可以使用（外部类名.this.成员）访问</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalInnerClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Outer02</span> outer02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outer02<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Outer02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//私有方法</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Outer m2()..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">class</span> <span class="token class-name">Inner02</span> <span class="token punctuation">&#123;</span><span class="token comment">//局部内部类</span>            <span class="token comment">//如果外部类和局部内部类的成员重名时，默认遵循就近原则，</span>            <span class="token comment">//如果想访问外部类的成员，则可以使用（外部类名.this.成员）访问</span>            <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">800</span><span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1="</span> <span class="token operator">+</span> n1 <span class="token operator">+</span> <span class="token string">" 外部类n1="</span> <span class="token operator">+</span> <span class="token class-name">Outer02</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以访问外部类的私有属性</span>                <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以访问外部类的私有方法</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//外部类在方法中，可以创建Inner02对象，然后调用方法即可</span>        <span class="token class-name">Inner02</span> inner02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inner02<span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//n1=800  外部类n1=100</span><span class="token comment">//Outer m2()...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-匿名内部类"><a href="#3-匿名内部类" class="headerlink" title="3.匿名内部类"></a>3.匿名内部类</h2><ul><li>1）本质是类 2）内部类 3）该类没有名字 4）同时还是一个对象</li><li>可以直接访问外部类的所有成员，包含私有的</li><li>不能添加访问修饰符，因为它的地位就是一个局部变量</li><li>作用域:仅仅在定义它的方法或代码块中</li><li>匿名内部类的基本语法:   new  类或接口（参数列表）{ 类体 }；</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//基于接口的匿名内部类</span><span class="token keyword">class</span> <span class="token class-name">Outer04</span> <span class="token punctuation">&#123;</span><span class="token comment">//外部类</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.需求：想使用接口IA,并创建对象</span>        <span class="token comment">//传统方式是写一个类，实现该接口，并创建对象</span>        <span class="token comment">//2.可以使用匿名内部类来简化开发</span>        <span class="token comment">//tiger的编译类型 IA，  tiger的运行类型 就是匿名内部类</span>        <span class="token comment">/*            我们看底层            class XXX implements IA() &#123; 这里XXX就是Outer04$1                @Override                public void cry() &#123;                System.out.println("老虎叫唤...");                &#125;            &#125;        */</span>        <span class="token comment">//3.JDK底层在创建匿名内部类Outer04$1 后立即马上就创建了Outer04$1实例，并且把地址返回给 tiger</span>        <span class="token comment">//4.匿名内部类，使用一次就不能再使用</span>        <span class="token class-name">IA</span> tiger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老虎叫唤..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        tiger<span class="token punctuation">.</span><span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">IA</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnonymousInnerClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Outer04</span> outer04 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outer04<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Outer04</span> <span class="token punctuation">&#123;</span><span class="token comment">//外部类</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//基于类的匿名内部类</span>        <span class="token comment">//1.father的编译类型Father,father 的运行类型是 Outer04$1,</span>        <span class="token comment">//2.底层会创建匿名内部类</span>        <span class="token comment">/*            class Outer04$1 extends Father&#123;                @Override                public void test() &#123;                System.out.println("匿名内部类重写了test方法");                &#125;            &#125;        */</span>        <span class="token comment">//3.同时也直接返回了 匿名内部类 Outer04$1的对象</span>        <span class="token comment">//4.注意我们这里的参数"jack"会传递给构造器</span>        <span class="token class-name">Father</span> father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匿名内部类重写了test方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//5.如果是一个抽象类，则必须要实现方法，这里test只是我们自己重写了</span>        <span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修狗吃骨头..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                father<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>匿名内部类案例：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClassExercise02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CellPhone</span> cellPhone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CellPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cellPhone<span class="token punctuation">.</span><span class="token function">alarmClock</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Bell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ring</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"懒猪起床了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Bell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ring</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小伙伴上课了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">ring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Bell</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">ring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">CellPhone</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">alarmClock</span><span class="token punctuation">(</span><span class="token class-name">Bell</span> bell<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        bell<span class="token punctuation">.</span><span class="token function">ring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//懒猪起床了！</span><span class="token comment">//小伙伴上课了!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-成员内部类"><a href="#4-成员内部类" class="headerlink" title="4.成员内部类"></a>4.成员内部类</h2><p>成员内部类是定义在外部类的成员位置，并且没有static修饰</p><ul><li>可以直接访问外部类的所有成员，包含私有的</li><li>可以添加任意的访问修饰符，因为它本身就是类的一个成员</li><li>作用域和外部类的其他成员一样，为整个类体</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemberInnerClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Outer08</span> outer08 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer08</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outer08<span class="token punctuation">.</span><span class="token function">t1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//外部其他类使用成员内部类的两种方式</span>        <span class="token comment">//第一种</span>        <span class="token class-name">Outer08<span class="token punctuation">.</span>Inner08</span> inner08 <span class="token operator">=</span> outer08<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner08</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inner08<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//第二种</span>        <span class="token comment">//在外部类中编写一个方法，可以返回Inner08()</span>        <span class="token class-name">Outer08<span class="token punctuation">.</span>Inner08</span> inner08Instance <span class="token operator">=</span> outer08<span class="token punctuation">.</span><span class="token function">getInner08Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inner08Instance<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Outer08</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">Inner08</span> <span class="token punctuation">&#123;</span><span class="token comment">//成员内部类</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//可以直接访问外部类的所有成员，包含私有的</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1="</span> <span class="token operator">+</span> n1 <span class="token operator">+</span> <span class="token string">" name="</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Inner08</span> <span class="token function">getInner08Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Inner08</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">t1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//使用成员内部类</span>        <span class="token class-name">Inner08</span> inner08 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner08</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inner08<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-静态内部类"><a href="#5-静态内部类" class="headerlink" title="5.静态内部类"></a>5.静态内部类</h2><p>静态内部类是定义在外部类的成员位置，并且有static修饰</p><ul><li>可以直接访问外部类的所有静态成员，包含私有的，但是不能直接访问非静态成员</li><li>可以添加任意的访问修饰符，因为它本身就是类的一个成员</li><li>作用域：同其他成员，为整个类体</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticInnerClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Outer10</span> outer10 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outer10<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//外部其他类访问静态内部类</span>        <span class="token comment">//第一种</span>        <span class="token class-name">Outer10<span class="token punctuation">.</span>Inner10</span> inner10 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer10<span class="token punctuation">.</span>Inner10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inner10<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//第二种</span>        <span class="token comment">//编写一个方法，可以返回静态内部类的对象实例</span>        <span class="token class-name">Outer10<span class="token punctuation">.</span>Inner10</span> inner101 <span class="token operator">=</span> outer10<span class="token punctuation">.</span><span class="token function">getInner10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inner10<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Outer10</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner10</span> <span class="token punctuation">&#123;</span><span class="token comment">//成员内部类</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//n1不可以</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//外部类访问静态内部类</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Inner10</span> inner10 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inner10<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Inner10</span> <span class="token function">getInner10</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Inner10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>==和equals的区别</title>
      <link href="/2022/09/27/he-equals/"/>
      <url>/2022/09/27/he-equals/</url>
      
        <content type="html"><![CDATA[<h1 id="x3D-x3D-和equals的区别"><a href="#x3D-x3D-和equals的区别" class="headerlink" title="&#x3D;&#x3D;和equals的区别"></a>&#x3D;&#x3D;和equals的区别</h1><h2 id="1-x3D-x3D"><a href="#1-x3D-x3D" class="headerlink" title="1.&#x3D;&#x3D;"></a>1.&#x3D;&#x3D;</h2><p><strong>&#x3D;&#x3D;是一个比较运算符</strong> </p><ol><li><p>&#x3D;&#x3D;：既可以判断基本类型，又可以判断引用类型</p></li><li><p>&#x3D;&#x3D;：如果判断基本类型，比较的是值是否相等(不一定类型要相同)</p></li><li><p>&#x3D;&#x3D;：如果判断引用类型，比较的是地址是否相等，即判断是不是同一个对象</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引用赋值，其实给的是地址</span><span class="token class-name">A</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token class-name">A</span> c <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token class-name">B</span> bObj <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bObj <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token keyword">int</span> d1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">double</span> d2 <span class="token operator">=</span> <span class="token number">10.0</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1 <span class="token operator">==</span> d2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-equals"><a href="#2-equals" class="headerlink" title="2.equals"></a>2.equals</h2><ol><li><p>equals是java.lang.Object类中的方法，只能判断引用类型,即地址是否相等</p></li><li><p>equals默认判断的是地址是否相等，但是Object子类中往往重写该方法，用于比较内容是否相等，如：String Date File 包装类等</p></li></ol><p><strong>Object类中equals方法的定义</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//说明：Object类中定义的equals()和==的作用是相同的，都是比较两个对象的地址是否相等</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Integer重写后的equals()方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> value <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//比较值是否相等</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> integer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> integer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer1 <span class="token operator">==</span> integer2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>integer2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>我们再来看一下String类中重写后的equals()方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">////判断如果比较的两个对象是同一个，则直接返回true</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>anObject <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> anotherString <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>anObject<span class="token punctuation">;</span><span class="token comment">//向下转型为String类型才能一起比较</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">//当前字符串的长度</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//n与形参字符串的长度进行比较 </span>                <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//一个一个的比较是否相等</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    i<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//如果两个字符串的字符都相等，则返回true</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//比较的不是字符串，直接返回false</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> string1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> string2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string1 <span class="token operator">==</span> string2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>string2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这时可能你又有疑问，下面代码为什么是true？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token operator">==</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>分析:<br><strong>str2创建对象的时候发现常量池中已经存在 “hello”,这时不需要创建新的对象直接将str2引用指向”hello”,这样str1和str2引用指向同一个地址值，所以结果为true。</strong></p><p><strong>练习：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Equals01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Person1</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>        <span class="token class-name">Person1</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person1 <span class="token operator">==</span> person2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false,Person1类并没有重写equals()方法</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-重写equals"><a href="#3-重写equals" class="headerlink" title="3.重写equals()"></a>3.重写equals()</h2><p>通常情况下，我们自定义的类如果使用equals()的话，通常也是比较两个对象的“实体内容”是否相同，那么我们就需要对Object中的equals()进行重写，那么下面我们就来重写一个equals()方法</p><img src="https://raw.githubusercontent.com/zhuanshenyujianta/images/master/img/202209271213357.png" style="zoom: 67%;" /><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EqualsExercise01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token char">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"smith"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token char">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断两个Person对象的内容是否相等</span><span class="token comment">//如果两个Person对象的各个属性值都一样，则返回true，反之false</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">char</span> gender<span class="token punctuation">;</span>    <span class="token comment">//重写Object的equals方法</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//判断如果比较的两个对象是同一个，则直接返回true</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//类型判断</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//是Person，我们才比较</span>            <span class="token comment">//进行类型转换，向下转型,因为需要的带object的各个属性</span>            <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">==</span> p<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">==</span> p<span class="token punctuation">.</span>gender<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//如果不是Person，则直接返回false</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">char</span> gender<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> gender<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGender</span><span class="token punctuation">(</span><span class="token keyword">char</span> gender<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK JRE JVM</title>
      <link href="/2022/09/26/jdk-jre-jvm/"/>
      <url>/2022/09/26/jdk-jre-jvm/</url>
      
        <content type="html"><![CDATA[<h1 id="JDK-JRE-JVM"><a href="#JDK-JRE-JVM" class="headerlink" title="JDK,JRE,JVM"></a>JDK,JRE,JVM</h1><h2 id="1-JVM-Java虚拟机-Java-virtual-machine"><a href="#1-JVM-Java虚拟机-Java-virtual-machine" class="headerlink" title="1.JVM-Java虚拟机(Java virtual machine)"></a>1.JVM-Java虚拟机(Java virtual machine)</h2><ol><li><p>JVM是虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据，内存，寄存器，包含在JDK中</p></li><li><p>对于不同的操作系统，有不同的虚拟机</p></li><li><p>Java虚拟机机制屏蔽了底层运行平台的差别，实现了一次编译，处处运行</p></li></ol><h2 id="2-JRE-Java运行环境-Java-Runtime-Environment"><a href="#2-JRE-Java运行环境-Java-Runtime-Environment" class="headerlink" title="2.JRE-Java运行环境(Java Runtime Environment)"></a>2.JRE-Java运行环境(Java Runtime Environment)</h2><ol><li><strong>JRE &#x3D; JVM + Java的核心类库(类)</strong></li><li>如果只想运行开发好的.class文件，只需要JRE即可</li></ol><h2 id="3-JDK-Java开发工具包-Java-Development-Kit"><a href="#3-JDK-Java开发工具包-Java-Development-Kit" class="headerlink" title="3.JDK-Java开发工具包(Java Development Kit)"></a>3.JDK-Java开发工具包(Java Development Kit)</h2><ol><li><strong>JDK &#x3D; JRE + java开发工具集（例如javac，java编译工具等）</strong></li><li>JDK是提供给开发人员使用的，其中包含了Java的开发工具也包括了JRE,所以安装了JDK，就不需要再单独安装JRE了</li></ol><h2 id="4-JDK-JRE-JVM的关系"><a href="#4-JDK-JRE-JVM的关系" class="headerlink" title="4.JDK,JRE,JVM的关系"></a>4.JDK,JRE,JVM的关系</h2><img src="https://raw.githubusercontent.com/zhuanshenyujianta/images/master/img/202209261255466.png" style="zoom:67%;" /><img src="https://raw.githubusercontent.com/zhuanshenyujianta/images/master/img/202209261255404.png" style="zoom:67%;" /><h2 id="5-一个Java程序执行流程"><a href="#5-一个Java程序执行流程" class="headerlink" title="5.一个Java程序执行流程"></a>5.一个Java程序执行流程</h2><ul><li>我们利用JDK（通过调用一些Java API）写出java源程序，然后储存在.java文件中。</li><li>JDK中的源码编译器javac将源代码编译成java字节码，储存在.class文件中。</li><li>JRE加载、验证、执行Java字节码。</li><li>JVM将字节码文件解析为机器码映射到CPU指令集或者供系统调用。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客文章</title>
      <link href="/2022/05/29/di-yi-pian-bo-ke-wen-zhang/"/>
      <url>/2022/05/29/di-yi-pian-bo-ke-wen-zhang/</url>
      
        <content type="html"><![CDATA[<h1 id="我的第一篇博客文章"><a href="#我的第一篇博客文章" class="headerlink" title="我的第一篇博客文章"></a>我的第一篇博客文章</h1><p>2022年5月29日，我的博客正式搭建成功，虽然有的功能并不齐全，但也是整整耗费了我2天，以后随着技术的精进，也会相应增加一些实用的功能。</p><p>同时，今天也正式代表着我踏入IT行业，希望以后能在IT届有所作为，也希望5年，10年后我的头发仍旧还在。初学编程，肯定会有难处，但是万事开头难，只要坚持下去就好了！</p><p>最后，写句座右铭给自己：兴趣可以遍地都是，专注和持之以恒才是稀缺的！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
